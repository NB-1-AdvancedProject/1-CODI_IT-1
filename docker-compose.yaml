version: "3.8"

services:
  server:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NODE_VERSION: 20.13.1
    container_name: app-server
    ports:
      - "3000:3000"
    environment:
      - SERVER_PORT=3000
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_DB_PORT}/${POSTGRES_DB}?schema=public
      - NODE_ENV=production
    depends_on:
      - db
    networks:
      - observability-net

  db:
    image: postgres
    container_name: app-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_DB_PORT}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - observability-net

  grafana:
    image: grafana/grafana-oss:latest
    ports:
      - "3001:3000"
    volumes:
      - ./observability/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
      - loki
      - tempo
    networks:
      - observability-net

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./observability/prometheus/alert.rules.yml:/etc/prometheus/alert.rules.yml
    networks:
      - observability-net

  alertmanager:
    image: prom/alertmanager:latest
    ports:
      - "9093:9093"
    volumes:
      - ./observability/alertmanager/config.yml:/etc/alertmanager/alertmanager.yml
    networks:
      - observability-net

  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/config.yml
    volumes:
      - ./observability/loki/config.yml:/etc/loki/config.yml
      - ./observability/loki:/var/loki
    networks:
      - observability-net

  tempo:
    image: grafana/tempo:latest
    ports:
      - "3200:3200"
    command: -config.file=/etc/tempo/tempo.yaml
    volumes:
      - ./observability/tempo/tempo.yaml:/etc/tempo/tempo.yaml
    networks:
      - observability-net

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    volumes:
      - c:/logs:/logs # windows 경로
      - ./observability/promtail/config.yaml:/etc/promtail/config.yaml
    command: -config.file=/etc/promtail/config.yaml
    restart: unless-stopped # 컨테이너가 중지되지 않는 한 자동으로 재시작
    depends_on:
      - loki
    networks:
      - observability-net

networks:
  observability-net:

volumes:
  postgres-data:
